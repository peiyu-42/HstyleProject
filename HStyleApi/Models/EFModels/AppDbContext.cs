// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace HStyleApi.Models.EFModels
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<CommonQuestion> CommonQuestions { get; set; }
        public virtual DbSet<CustomerQuestion> CustomerQuestions { get; set; }
        public virtual DbSet<EassyFollow> EassyFollows { get; set; }
        public virtual DbSet<EcommentsLike> EcommentsLikes { get; set; }
        public virtual DbSet<Elike> Elikes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Essay> Essays { get; set; }
        public virtual DbSet<EssaysComment> EssaysComments { get; set; }
        public virtual DbSet<HActivity> HActivities { get; set; }
        public virtual DbSet<HCheckIn> HCheckIns { get; set; }
        public virtual DbSet<HSourceDetail> HSourceDetails { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderLog> OrderLogs { get; set; }
        public virtual DbSet<OrderStatus> OrderStatuses { get; set; }
        public virtual DbSet<OrderStatusDescription> OrderStatusDescriptions { get; set; }
        public virtual DbSet<Pcategory> Pcategories { get; set; }
        public virtual DbSet<PcommentsHelpful> PcommentsHelpfuls { get; set; }
        public virtual DbSet<PermissionsE> PermissionsEs { get; set; }
        public virtual DbSet<PermissionsM> PermissionsMs { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductComment> ProductComments { get; set; }
        public virtual DbSet<ProductLike> ProductLikes { get; set; }
        public virtual DbSet<QuestionCategory> QuestionCategories { get; set; }
        public virtual DbSet<Spec> Specs { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<VcommentLike> VcommentLikes { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<VideoCategory> VideoCategories { get; set; }
        public virtual DbSet<VideoComment> VideoComments { get; set; }
        public virtual DbSet<VideoLike> VideoLikes { get; set; }
        public virtual DbSet<VideoView> VideoViews { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address");

                entity.HasIndex(e => e.MemberId, "IX_Member_id");

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.Destination)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("destination");

                entity.Property(e => e.DestinationCategory)
                    .HasMaxLength(50)
                    .HasColumnName("destination_category")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DestinationName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("destination_name");

                entity.Property(e => e.DestinationThe)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("destination_THE");

                entity.Property(e => e.Gender).HasDefaultValueSql("((1))");

                entity.Property(e => e.MemberId).HasColumnName("Member_id");

                entity.Property(e => e.Preset)
                    .HasColumnName("preset")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Address_dbo.Members_Member_id");
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasKey(e => new { e.SpecId, e.MemberId })
                    .HasName("PK_dbo.Cart");

                entity.ToTable("Cart");

                entity.HasIndex(e => e.MemberId, "IX_MemberId");

                entity.HasIndex(e => e.SpecId, "IX_SpecId");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Cart_dbo.Members_MemberId");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Cart_dbo.Spec_SpecId");
            });

            modelBuilder.Entity<CommonQuestion>(entity =>
            {
                entity.HasIndex(e => e.QcategoryId, "IX_QCategory_Id");

                entity.Property(e => e.CommonQuestionId).HasColumnName("CommonQuestion_Id");

                entity.Property(e => e.Answer).IsRequired();

                entity.Property(e => e.QcategoryId).HasColumnName("QCategory_Id");

                entity.Property(e => e.Question).IsRequired();

                entity.Property(e => e.SatisfactionNo).HasColumnName("Satisfaction_No");

                entity.Property(e => e.SatisfactionYes).HasColumnName("Satisfaction_Yes");

                entity.HasOne(d => d.Qcategory)
                    .WithMany(p => p.CommonQuestions)
                    .HasForeignKey(d => d.QcategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.CommonQuestions_dbo.Question_Categories_QCategory_Id");
            });

            modelBuilder.Entity<CustomerQuestion>(entity =>
            {
                entity.HasIndex(e => e.MemberId, "IX_Member_Id");

                entity.HasIndex(e => e.QcategoryId, "IX_QCategory_Id");

                entity.Property(e => e.CustomerQuestionId).HasColumnName("CustomerQuestion_Id");

                entity.Property(e => e.AskTime).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_Id");

                entity.Property(e => e.FilePath).HasMaxLength(200);

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.ProblemDescription)
                    .IsRequired()
                    .HasColumnName("Problem_Description");

                entity.Property(e => e.QcategoryId).HasColumnName("QCategory_Id");

                entity.Property(e => e.SolutionDescription).HasColumnName("Solution_Description");

                entity.Property(e => e.SolveTime).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.CustomerQuestions)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("FK_dbo.CustomerQuestions_dbo.Members_Member_Id");

                entity.HasOne(d => d.Qcategory)
                    .WithMany(p => p.CustomerQuestions)
                    .HasForeignKey(d => d.QcategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.CustomerQuestions_dbo.Question_Categories_QCategory_Id");
            });

            modelBuilder.Entity<EassyFollow>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("PK_dbo.Eassy_Follows");

                entity.ToTable("Eassy_Follows");

                entity.HasIndex(e => e.EassyId, "IX_Eassy_Id");

                entity.HasIndex(e => e.MemberId, "IX_Member_Id");

                entity.Property(e => e.MemberId)
                    .ValueGeneratedNever()
                    .HasColumnName("Member_Id");

                entity.Property(e => e.EassyId).HasColumnName("Eassy_Id");

                entity.Property(e => e.Ftime)
                    .HasColumnType("datetime")
                    .HasColumnName("FTime");

                entity.HasOne(d => d.Eassy)
                    .WithMany(p => p.EassyFollows)
                    .HasForeignKey(d => d.EassyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Eassy_Follows_dbo.Essays_Eassy_Id");

                entity.HasOne(d => d.Member)
                    .WithOne(p => p.EassyFollow)
                    .HasForeignKey<EassyFollow>(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Eassy_Follows_dbo.Members_Member_Id");
            });

            modelBuilder.Entity<EcommentsLike>(entity =>
            {
                entity.HasKey(e => new { e.CommentId, e.MemberId })
                    .HasName("PK_dbo.EComments_Likes");

                entity.ToTable("EComments_Likes");

                entity.HasIndex(e => e.CommentId, "IX_Comment_Id");

                entity.HasIndex(e => e.MemberId, "IX_Member_Id");

                entity.Property(e => e.CommentId).HasColumnName("Comment_Id");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.EcommentsLikes)
                    .HasForeignKey(d => d.CommentId)
                    .HasConstraintName("FK_dbo.EComments_Likes_dbo.Essays_Comments_Comment_Id");
            });

            modelBuilder.Entity<Elike>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.EssayId })
                    .HasName("PK_dbo.Elikes");

                entity.HasIndex(e => e.EssayId, "IX_Essay_Id");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.EssayId).HasColumnName("Essay_Id");

                entity.HasOne(d => d.Essay)
                    .WithMany(p => p.Elikes)
                    .HasForeignKey(d => d.EssayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Elikes_dbo.Essays_Essay_Id");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasIndex(e => e.PermissionId, "IX_Permission_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EncryptedPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PermissionId).HasColumnName("Permission_id");

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("FK_dbo.Employees_dbo.PermissionsE_Permission_id");
            });

            modelBuilder.Entity<Essay>(entity =>
            {
                entity.HasIndex(e => e.CategoryId, "IX_CategoryId");

                entity.HasIndex(e => e.InfluencerId, "IX_Influencer_Id");

                entity.Property(e => e.EssayId).HasColumnName("Essay_Id");

                entity.Property(e => e.Econtent)
                    .IsRequired()
                    .HasColumnName("EContent");

                entity.Property(e => e.Etitle)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("ETitle");

                entity.Property(e => e.InfluencerId).HasColumnName("Influencer_Id");

                entity.Property(e => e.Pon).HasColumnName("PON");

                entity.Property(e => e.UplodTime).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Essays)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Essays_dbo.VideoCategories_CategoryId");

                entity.HasOne(d => d.Influencer)
                    .WithMany(p => p.Essays)
                    .HasForeignKey(d => d.InfluencerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Essays_dbo.Employees_Influencer_Id");

                entity.HasMany(d => d.Imgs)
                    .WithMany(p => p.Essays)
                    .UsingEntity<Dictionary<string, object>>(
                        "EssaysImg",
                        l => l.HasOne<Image>().WithMany().HasForeignKey("ImgId").HasConstraintName("FK_dbo.Essays_Imgs_dbo.Images_Img_Id"),
                        r => r.HasOne<Essay>().WithMany().HasForeignKey("EssayId").HasConstraintName("FK_dbo.Essays_Imgs_dbo.Essays_Essay_Id"),
                        j =>
                        {
                            j.HasKey("EssayId", "ImgId").HasName("PK_dbo.Essays_Imgs");

                            j.ToTable("Essays_Imgs");

                            j.HasIndex(new[] { "EssayId" }, "IX_Essay_Id");

                            j.HasIndex(new[] { "ImgId" }, "IX_Img_Id");

                            j.IndexerProperty<int>("EssayId").HasColumnName("Essay_Id");

                            j.IndexerProperty<int>("ImgId").HasColumnName("Img_Id");
                        });

                entity.HasMany(d => d.Tags)
                    .WithMany(p => p.Essays)
                    .UsingEntity<Dictionary<string, object>>(
                        "EssaysTag",
                        l => l.HasOne<Tag>().WithMany().HasForeignKey("TagId").HasConstraintName("FK_dbo.Essays_Tags_dbo.Tags_Tag_Id"),
                        r => r.HasOne<Essay>().WithMany().HasForeignKey("EssayId").HasConstraintName("FK_dbo.Essays_Tags_dbo.Essays_Essay_Id"),
                        j =>
                        {
                            j.HasKey("EssayId", "TagId").HasName("PK_dbo.Essays_Tags");

                            j.ToTable("Essays_Tags");

                            j.HasIndex(new[] { "EssayId" }, "IX_Essay_Id");

                            j.HasIndex(new[] { "TagId" }, "IX_Tag_Id");

                            j.IndexerProperty<int>("EssayId").HasColumnName("Essay_Id");

                            j.IndexerProperty<int>("TagId").HasColumnName("Tag_Id");
                        });
            });

            modelBuilder.Entity<EssaysComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("PK_dbo.Essays_Comments");

                entity.ToTable("Essays_Comments");

                entity.HasIndex(e => e.EssayId, "IX_Essay_Id");

                entity.HasIndex(e => e.MemberId, "IX_Member_Id");

                entity.Property(e => e.CommentId).HasColumnName("Comment_Id");

                entity.Property(e => e.Ecomment)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("EComment");

                entity.Property(e => e.EssayId).HasColumnName("Essay_Id");

                entity.Property(e => e.Etime)
                    .HasColumnType("datetime")
                    .HasColumnName("ETime");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.HasOne(d => d.Essay)
                    .WithMany(p => p.EssaysComments)
                    .HasForeignKey(d => d.EssayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Essays_Comments_dbo.Essays_Essay_Id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.EssaysComments)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Essays_Comments_dbo.Members_Member_Id");
            });

            modelBuilder.Entity<HActivity>(entity =>
            {
                entity.ToTable("H_Activities");

                entity.Property(e => e.HActivityId).HasColumnName("H_Activity_Id");

                entity.Property(e => e.ActivityDescribe)
                    .IsRequired()
                    .HasColumnName("Activity_Describe");

                entity.Property(e => e.ActivityName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Activity_Name");

                entity.Property(e => e.HValue).HasColumnName("H_Value");
            });

            modelBuilder.Entity<HCheckIn>(entity =>
            {
                entity.HasKey(e => e.CheckInHId)
                    .HasName("PK_dbo.H_CheckIns");

                entity.ToTable("H_CheckIns");

                entity.HasIndex(e => e.ActivityId, "IX_Activity_Id");

                entity.HasIndex(e => e.MemberId, "IX_Member_Id");

                entity.Property(e => e.CheckInHId).HasColumnName("CheckIn_H_Id");

                entity.Property(e => e.ActivityId).HasColumnName("Activity_Id");

                entity.Property(e => e.CheckInTimes).HasColumnName("CheckIn_Times");

                entity.Property(e => e.LastTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Time");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.HCheckIns)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.H_CheckIns_dbo.H_Activities_Activity_Id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.HCheckIns)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.H_CheckIns_dbo.Members_Member_Id");
            });

            modelBuilder.Entity<HSourceDetail>(entity =>
            {
                entity.HasKey(e => e.SourceHId)
                    .HasName("PK_dbo.H_Source_Details");

                entity.ToTable("H_Source_Details");

                entity.HasIndex(e => e.ActivityId, "IX_Activity_Id");

                entity.HasIndex(e => e.EmployeeId, "IX_Employee_Id");

                entity.HasIndex(e => e.MemberId, "IX_Member_Id");

                entity.Property(e => e.SourceHId).HasColumnName("Source_H_Id");

                entity.Property(e => e.ActivityId).HasColumnName("Activity_Id");

                entity.Property(e => e.DifferenceH).HasColumnName("Difference_H");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_Id");

                entity.Property(e => e.EventTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Event_Time");

                entity.Property(e => e.MemberId).HasColumnName("Member_Id");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TotalHSoFar).HasColumnName("Total_H_SoFar");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.HSourceDetails)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.H_Source_Details_dbo.H_Activities_Activity_Id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HSourceDetails)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_dbo.H_Source_Details_dbo.Employees_Employee_Id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.HSourceDetails)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.H_Source_Details_dbo.Members_Member_Id");
            });

            modelBuilder.Entity<Image>(entity =>
            {
                entity.Property(e => e.ImageId).HasColumnName("Image_Id");

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasMany(d => d.Comments)
                    .WithMany(p => p.PcommentImgs)
                    .UsingEntity<Dictionary<string, object>>(
                        "PcommentsImg",
                        l => l.HasOne<ProductComment>().WithMany().HasForeignKey("CommentId").HasConstraintName("FK_dbo.PComments_Imgs_dbo.Product_Comments_Comment_id"),
                        r => r.HasOne<Image>().WithMany().HasForeignKey("PcommentImgId").HasConstraintName("FK_dbo.PComments_Imgs_dbo.Images_PComment_img_id"),
                        j =>
                        {
                            j.HasKey("PcommentImgId", "CommentId").HasName("PK_dbo.PComments_Imgs");

                            j.ToTable("PComments_Imgs");

                            j.HasIndex(new[] { "CommentId" }, "IX_Comment_id");

                            j.HasIndex(new[] { "PcommentImgId" }, "IX_PComment_img_id");

                            j.IndexerProperty<int>("PcommentImgId").HasColumnName("PComment_img_id");

                            j.IndexerProperty<int>("CommentId").HasColumnName("Comment_id");
                        });

                entity.HasMany(d => d.Products)
                    .WithMany(p => p.Imgs)
                    .UsingEntity<Dictionary<string, object>>(
                        "ImgsProduct",
                        l => l.HasOne<Product>().WithMany().HasForeignKey("ProductId").HasConstraintName("FK_dbo.Imgs_Products_dbo.Products_Product_Id"),
                        r => r.HasOne<Image>().WithMany().HasForeignKey("ImgId").HasConstraintName("FK_dbo.Imgs_Products_dbo.Images_Img_Id"),
                        j =>
                        {
                            j.HasKey("ImgId", "ProductId").HasName("PK_dbo.Imgs_Products");

                            j.ToTable("Imgs_Products");

                            j.HasIndex(new[] { "ImgId" }, "IX_Img_Id");

                            j.HasIndex(new[] { "ProductId" }, "IX_Product_Id");

                            j.IndexerProperty<int>("ImgId").HasColumnName("Img_Id");

                            j.IndexerProperty<int>("ProductId").HasColumnName("Product_Id");
                        });
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasIndex(e => e.PermissionId, "IX_Permission_Id");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EncryptedPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Jointime).HasColumnType("datetime");

                entity.Property(e => e.MailCode)
                    .HasMaxLength(100)
                    .HasColumnName("Mail_code");

                entity.Property(e => e.MailVerify).HasColumnName("Mail_verify");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PermissionId).HasColumnName("Permission_Id");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Phone_Number");

                entity.Property(e => e.TotalH).HasColumnName("Total_H");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("FK_dbo.Members_dbo.PermissionsM_Permission_Id");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.Property(e => e.NewsId).HasColumnName("News_Id");

                entity.Property(e => e.Ncontent)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("NContent");

                entity.Property(e => e.NproductId).HasColumnName("NProduct_Id");

                entity.Property(e => e.Ntime)
                    .HasColumnType("datetime")
                    .HasColumnName("NTime");

                entity.Property(e => e.Ntitle)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("NTitle");

                entity.Property(e => e.PhotoId).HasColumnName("Photo_Id");

                entity.Property(e => e.TagId).HasColumnName("Tag_Id");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasIndex(e => e.EmployeeId, "IX_Employee_id");

                entity.HasIndex(e => e.MemberId, "IX_Member_id");

                entity.HasIndex(e => e.StatusDescriptionId, "IX_Status_Description_id");

                entity.HasIndex(e => e.StatusId, "IX_Status_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.MemberId).HasColumnName("Member_id");

                entity.Property(e => e.PayInfo).HasMaxLength(50);

                entity.Property(e => e.Payment)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RequestRefundTime).HasColumnType("datetime");

                entity.Property(e => e.ShipAddress)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ShipName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ShipPhone)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ShipVia)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShippedDate).HasColumnType("datetime");

                entity.Property(e => e.StatusDescriptionId).HasColumnName("Status_Description_id");

                entity.Property(e => e.StatusId).HasColumnName("Status_id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_dbo.Orders_dbo.Employees_Employee_id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Orders_dbo.Members_Member_id");

                entity.HasOne(d => d.StatusDescription)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.StatusDescriptionId)
                    .HasConstraintName("FK_dbo.Orders_dbo.Order_StatusDescription_Status_Description_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Orders_dbo.Order_Status_Status_id");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId })
                    .HasName("PK_dbo.Order_Details");

                entity.ToTable("Order_Details");

                entity.HasIndex(e => e.OrderId, "IX_Order_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.ProductId).HasColumnName("Product_id");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Order_Details_dbo.Orders_Order_id");
            });

            modelBuilder.Entity<OrderLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_dbo.Order_Log");

                entity.ToTable("Order_Log");

                entity.Property(e => e.LogId).HasColumnName("Log_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StatusChangedTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Status_ChangedTime");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("PK_dbo.Order_Status");

                entity.ToTable("Order_Status");

                entity.Property(e => e.StatusId)
                    .ValueGeneratedNever()
                    .HasColumnName("Status_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OrderStatusDescription>(entity =>
            {
                entity.HasKey(e => e.DescriptionId)
                    .HasName("PK_dbo.Order_StatusDescription");

                entity.ToTable("Order_StatusDescription");

                entity.Property(e => e.DescriptionId)
                    .ValueGeneratedNever()
                    .HasColumnName("Description_id");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.StatusId).HasColumnName("Status_id");
            });

            modelBuilder.Entity<Pcategory>(entity =>
            {
                entity.ToTable("PCategories");

                entity.Property(e => e.PcategoryId).HasColumnName("PCategory_Id");

                entity.Property(e => e.PcategoryName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PCategoryName");
            });

            modelBuilder.Entity<PcommentsHelpful>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.CommentId })
                    .HasName("PK_dbo.PComments_Helpful");

                entity.ToTable("PComments_Helpful");

                entity.Property(e => e.MemberId).HasColumnName("Member_id");

                entity.Property(e => e.CommentId).HasColumnName("Comment_id");
            });

            modelBuilder.Entity<PermissionsE>(entity =>
            {
                entity.HasKey(e => e.PermissionMId)
                    .HasName("PK_dbo.PermissionsE");

                entity.ToTable("PermissionsE");

                entity.Property(e => e.PermissionMId).HasColumnName("PermissionM_id");

                entity.Property(e => e.Level).HasMaxLength(50);
            });

            modelBuilder.Entity<PermissionsM>(entity =>
            {
                entity.HasKey(e => e.PermissionId)
                    .HasName("PK_dbo.PermissionsM");

                entity.ToTable("PermissionsM");

                entity.Property(e => e.PermissionId).HasColumnName("Permission_id");

                entity.Property(e => e.Level).HasMaxLength(50);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasIndex(e => e.CategoryId, "IX_Category_Id");

                entity.Property(e => e.ProductId).HasColumnName("Product_Id");

                entity.Property(e => e.CategoryId).HasColumnName("Category_Id");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasColumnName("Create_at");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Product_Name");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Products_dbo.PCategories_Category_Id");

                entity.HasMany(d => d.Tags)
                    .WithMany(p => p.Products)
                    .UsingEntity<Dictionary<string, object>>(
                        "TagsProduct",
                        l => l.HasOne<Tag>().WithMany().HasForeignKey("TagId").HasConstraintName("FK_dbo.Tags_Products_dbo.Tags_Tag_Id"),
                        r => r.HasOne<Product>().WithMany().HasForeignKey("ProductId").HasConstraintName("FK_dbo.Tags_Products_dbo.Products_Product_Id"),
                        j =>
                        {
                            j.HasKey("ProductId", "TagId").HasName("PK_dbo.Tags_Products");

                            j.ToTable("Tags_Products");

                            j.HasIndex(new[] { "ProductId" }, "IX_Product_Id");

                            j.HasIndex(new[] { "TagId" }, "IX_Tag_Id");

                            j.IndexerProperty<int>("ProductId").HasColumnName("Product_Id");

                            j.IndexerProperty<int>("TagId").HasColumnName("Tag_Id");
                        });
            });

            modelBuilder.Entity<ProductComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("PK_dbo.Product_Comments");

                entity.ToTable("Product_Comments");

                entity.HasIndex(e => e.OrderId, "IX_Order_id");

                entity.HasIndex(e => e.ProductId, "IX_Product_id");

                entity.Property(e => e.CommentId).HasColumnName("Comment_id");

                entity.Property(e => e.CommentContent)
                    .HasMaxLength(1000)
                    .HasColumnName("Comment_content");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.ProductId).HasColumnName("Product_id");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ProductComments)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Product_Comments_dbo.Orders_Order_id");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductComments)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Product_Comments_dbo.Products_Product_id");
            });

            modelBuilder.Entity<ProductLike>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.MemberId })
                    .HasName("PK_dbo.Product_Likes");

                entity.ToTable("Product_Likes");

                entity.HasIndex(e => e.ProductId, "IX_Product_id");

                entity.Property(e => e.ProductId).HasColumnName("Product_id");

                entity.Property(e => e.MemberId).HasColumnName("Member_id");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductLikes)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Product_Likes_dbo.Products_Product_id");
            });

            modelBuilder.Entity<QuestionCategory>(entity =>
            {
                entity.HasKey(e => e.QcategoryId)
                    .HasName("PK_dbo.Question_Categories");

                entity.ToTable("Question_Categories");

                entity.Property(e => e.QcategoryId).HasColumnName("QCategory_Id");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasColumnName("Category_Name");
            });

            modelBuilder.Entity<Spec>(entity =>
            {
                entity.ToTable("Spec");

                entity.HasIndex(e => e.ProductId, "IX_Product_Id");

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("Product_Id");

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Specs)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Spec_dbo.Products_Product_Id");
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasMany(d => d.Videos)
                    .WithMany(p => p.Tags)
                    .UsingEntity<Dictionary<string, object>>(
                        "TagsVideo",
                        l => l.HasOne<Video>().WithMany().HasForeignKey("VideoId").HasConstraintName("FK_dbo.Tags_Video_dbo.Videos_VideoId"),
                        r => r.HasOne<Tag>().WithMany().HasForeignKey("TagId").HasConstraintName("FK_dbo.Tags_Video_dbo.Tags_TagId"),
                        j =>
                        {
                            j.HasKey("TagId", "VideoId").HasName("PK_dbo.Tags_Video");

                            j.ToTable("Tags_Video");

                            j.HasIndex(new[] { "TagId" }, "IX_TagId");

                            j.HasIndex(new[] { "VideoId" }, "IX_VideoId");
                        });
            });

            modelBuilder.Entity<VcommentLike>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.CommentId })
                    .HasName("PK_dbo.VCommentLike");

                entity.ToTable("VCommentLike");

                entity.HasIndex(e => e.CommentId, "IX_CommentId");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.VcommentLikes)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.VCommentLike_dbo.VideoComments_CommentId");
            });

            modelBuilder.Entity<Video>(entity =>
            {
                entity.HasIndex(e => e.CategoryId, "IX_CategoryId");

                entity.HasIndex(e => e.ImageId, "IX_ImageId");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OffShelffTime).HasColumnType("datetime");

                entity.Property(e => e.OnShelffTime).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Videos)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Videos_dbo.VideoCategories_CategoryId");

                entity.HasOne(d => d.Image)
                    .WithMany(p => p.Videos)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Videos_dbo.Images_ImageId");
            });

            modelBuilder.Entity<VideoCategory>(entity =>
            {
                entity.Property(e => e.CategoryDescription).HasMaxLength(200);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<VideoComment>(entity =>
            {
                entity.HasIndex(e => e.MemberId, "IX_MemberId");

                entity.HasIndex(e => e.VideoId, "IX_VideoId");

                entity.Property(e => e.Comment).IsRequired();

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.VideoComments)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.VideoComments_dbo.Members_MemberId");

                entity.HasOne(d => d.Video)
                    .WithMany(p => p.VideoComments)
                    .HasForeignKey(d => d.VideoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.VideoComments_dbo.Videos_VideoId");
            });

            modelBuilder.Entity<VideoLike>(entity =>
            {
                entity.HasKey(e => new { e.VideoId, e.MemberId })
                    .HasName("PK_dbo.VideoLikes");

                entity.HasIndex(e => e.VideoId, "IX_VideoId");

                entity.HasOne(d => d.Video)
                    .WithMany(p => p.VideoLikes)
                    .HasForeignKey(d => d.VideoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.VideoLikes_dbo.Videos_VideoId");
            });

            modelBuilder.Entity<VideoView>(entity =>
            {
                entity.HasKey(e => e.VideoId)
                    .HasName("PK_dbo.VideoViews");

                entity.HasIndex(e => e.VideoId, "IX_VideoId");

                entity.Property(e => e.VideoId).ValueGeneratedNever();

                entity.HasOne(d => d.Video)
                    .WithOne(p => p.VideoView)
                    .HasForeignKey<VideoView>(d => d.VideoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.VideoViews_dbo.Videos_VideoId");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}